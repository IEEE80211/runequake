// This file is automatically generated by the map script.
// Don't edit it, edit the script instead.

float (float levsize)
sized_map_count =
{
	if (levsize == 1) return 11;
	if (levsize == 2) return 19;
	if (levsize == 3) return 8;
	error ("invalid arg");
	return FALSE;
};

string (float levsize, float n)
sized_map =
{
	if (levsize == 1) {
		if (n == 1) return "start";
		if (n == 2) return "e1m6";
		if (n == 3) return "e1m7";
		if (n == 4) return "e3m2";
		if (n == 5) return "e3m3";
		if (n == 6) return "e3m7";
		if (n == 7) return "end";
		if (n == 8) return "dm1";
		if (n == 9) return "dm4";
		if (n == 10) return "dm5";
		if (n == 11) return "dm6";
	}
	if (levsize == 2) {
		if (n == 1) return "e1m1";
		if (n == 2) return "e1m2";
		if (n == 3) return "e1m3";
		if (n == 4) return "e1m4";
		if (n == 5) return "e1m8";
		if (n == 6) return "e1m5";
		if (n == 7) return "e2m1";
		if (n == 8) return "e2m2";
		if (n == 9) return "e2m3";
		if (n == 10) return "e2m7";
		if (n == 11) return "e2m6";
		if (n == 12) return "e3m1";
		if (n == 13) return "e3m4";
		if (n == 14) return "e3m6";
		if (n == 15) return "e4m1";
		if (n == 16) return "e4m2";
		if (n == 17) return "e4m6";
		if (n == 18) return "dm2";
		if (n == 19) return "dm3";
	}
	if (levsize == 3) {
		if (n == 1) return "e2m4";
		if (n == 2) return "e2m5";
		if (n == 3) return "e3m5";
		if (n == 4) return "e4m3";
		if (n == 5) return "e4m4";
		if (n == 6) return "e4m5";
		if (n == 7) return "e4m8";
		if (n == 8) return "e4m7";
	}
	error ("invalid arg");
	return "invalid arg";
};

float (string m)
map_size =
{
	if (m == "start") return 1;
	if (m == "e1m6") return 1;
	if (m == "e1m7") return 1;
	if (m == "e3m2") return 1;
	if (m == "e3m3") return 1;
	if (m == "e3m7") return 1;
	if (m == "end") return 1;
	if (m == "dm1") return 1;
	if (m == "dm4") return 1;
	if (m == "dm5") return 1;
	if (m == "dm6") return 1;
	if (m == "e1m1") return 2;
	if (m == "e1m2") return 2;
	if (m == "e1m3") return 2;
	if (m == "e1m4") return 2;
	if (m == "e1m8") return 2;
	if (m == "e1m5") return 2;
	if (m == "e2m1") return 2;
	if (m == "e2m2") return 2;
	if (m == "e2m3") return 2;
	if (m == "e2m7") return 2;
	if (m == "e2m6") return 2;
	if (m == "e3m1") return 2;
	if (m == "e3m4") return 2;
	if (m == "e3m6") return 2;
	if (m == "e4m1") return 2;
	if (m == "e4m2") return 2;
	if (m == "e4m6") return 2;
	if (m == "dm2") return 2;
	if (m == "dm3") return 2;
	if (m == "e2m4") return 3;
	if (m == "e2m5") return 3;
	if (m == "e3m5") return 3;
	if (m == "e4m3") return 3;
	if (m == "e4m4") return 3;
	if (m == "e4m5") return 3;
	if (m == "e4m8") return 3;
	if (m == "e4m7") return 3;
	return 0;
};

string ()
rand_map =
{
	local float i, n;

	if (deathmatch & DM_LAN_MODE)
		n = 38;
	else
		n = 35;
	i = ceil (random () * n);
	if (i <= 1) return "e1m6";
	if (i == 2) return "e3m1";
	if (i == 3) return "e3m2";
	if (i == 4) return "e3m3";
	if (i == 5) return "e3m4";
	if (i == 6) return "e3m5";
	if (i == 7) return "e3m6";
	if (i == 8) return "e3m7";
	if (i == 9) return "e2m1";
	if (i == 10) return "dm1";
	if (i == 11) return "e2m2";
	if (i == 12) return "e2m3";
	if (i == 13) return "dm2";
	if (i == 14) return "dm3";
	if (i == 15) return "e2m4";
	if (i == 16) return "dm4";
	if (i == 17) return "e2m5";
	if (i == 18) return "dm5";
	if (i == 19) return "e2m6";
	if (i == 20) return "dm6";
	if (i == 21) return "e2m7";
	if (i == 22) return "e4m1";
	if (i == 23) return "e4m2";
	if (i == 24) return "e4m3";
	if (i == 25) return "e4m4";
	if (i == 26) return "e4m5";
	if (i == 27) return "e4m6";
	if (i == 28) return "e4m7";
	if (i == 29) return "e4m8";
	if (i == 30) return "e1m1";
	if (i == 31) return "start";
	if (i == 32) return "e1m2";
	if (i == 33) return "e1m3";
	if (i == 34) return "e1m4";
	if (i == 35) return "e1m5";
	if (i == 36) return "end";
	if (i == 37) return "e1m7";
	if (i >= 38) return "e1m8";
	error ("invalid map number");
	return "invalid map number";
};

string ()
impulse_to_map =
{
	if (self.impulse == 57) { return "start"; }
	if (self.impulse == 16) { return "e1m6"; }
	if (self.impulse == 17) { return "e1m7"; }
	if (self.impulse == 32) { return "e3m2"; }
	if (self.impulse == 33) { return "e3m3"; }
	if (self.impulse == 37) { return "e3m7"; }
	if (self.impulse == 58) { return "end"; }
	if (self.impulse == 51) { return "dm1"; }
	if (self.impulse == 54) { return "dm4"; }
	if (self.impulse == 55) { return "dm5"; }
	if (self.impulse == 56) { return "dm6"; }
	if (self.impulse == 11) { return "e1m1"; }
	if (self.impulse == 12) { return "e1m2"; }
	if (self.impulse == 13) { return "e1m3"; }
	if (self.impulse == 14) { return "e1m4"; }
	if (self.impulse == 18) { return "e1m8"; }
	if (self.impulse == 15) { return "e1m5"; }
	if (self.impulse == 21) { return "e2m1"; }
	if (self.impulse == 22) { return "e2m2"; }
	if (self.impulse == 23) { return "e2m3"; }
	if (self.impulse == 27) { return "e2m7"; }
	if (self.impulse == 26) { return "e2m6"; }
	if (self.impulse == 31) { return "e3m1"; }
	if (self.impulse == 34) { return "e3m4"; }
	if (self.impulse == 36) { return "e3m6"; }
	if (self.impulse == 41) { return "e4m1"; }
	if (self.impulse == 42) { return "e4m2"; }
	if (self.impulse == 46) { return "e4m6"; }
	if (self.impulse == 52) { return "dm2"; }
	if (self.impulse == 53) { return "dm3"; }
	if (self.impulse == 24) { return "e2m4"; }
	if (self.impulse == 25) { return "e2m5"; }
	if (self.impulse == 35) { return "e3m5"; }
	if (self.impulse == 43) { return "e4m3"; }
	if (self.impulse == 44) { return "e4m4"; }
	if (self.impulse == 45) { return "e4m5"; }
	if (self.impulse == 48) { return "e4m8"; }
	if (self.impulse == 47) { return "e4m7"; }
	return string_null;
};

float tf_0, tf_1, tf_2, tf_3, tf_4, tf_5, tf_6, tf_7, tf_8, tf_9, tf_10, tf_11, tf_12, tf_13, tf_14;

void ()
frag_init =
{
	tf_0 = tf_1 = tf_2 = tf_3 = tf_4 = tf_5 = tf_6 = tf_7 = tf_8 = tf_9 = tf_10 = tf_11 = tf_12 = tf_13 = tf_14 = -23000;
};

void (entity e, float f)
add_frag =
{
	if (deathmatch & DM_DAMAGE_MATCH && !damage_match_hack) return;
	if (e.runetype == RN_PACK_RAT && f > 0 && !deathmatch & DM_DAMAGE_MATCH) f = f + f * pack_rat_frag_bonus_e (e);
	e.frags = e.frags + f;
	e.recent_frags = e.recent_frags + f;
	if (e.team == 1) { if (tf_1 == -23000) tf_1 = f; else tf_1 = tf_1 + f; }
	else if (e.team == 2) { if (tf_2 == -23000) tf_2 = f; else tf_2 = tf_2 + f; }
	else if (e.team == 3) { if (tf_3 == -23000) tf_3 = f; else tf_3 = tf_3 + f; }
	else if (e.team == 4) { if (tf_4 == -23000) tf_4 = f; else tf_4 = tf_4 + f; }
	else if (e.team == 5) { if (tf_5 == -23000) tf_5 = f; else tf_5 = tf_5 + f; }
	else if (e.team == 6) { if (tf_6 == -23000) tf_6 = f; else tf_6 = tf_6 + f; }
	else if (e.team == 7) { if (tf_7 == -23000) tf_7 = f; else tf_7 = tf_7 + f; }
	else if (e.team == 8) { if (tf_8 == -23000) tf_8 = f; else tf_8 = tf_8 + f; }
	else if (e.team == 9) { if (tf_9 == -23000) tf_9 = f; else tf_9 = tf_9 + f; }
	else if (e.team == 10) { if (tf_10 == -23000) tf_10 = f; else tf_10 = tf_10 + f; }
	else if (e.team == 11) { if (tf_11 == -23000) tf_11 = f; else tf_11 = tf_11 + f; }
	else if (e.team == 12) { if (tf_12 == -23000) tf_12 = f; else tf_12 = tf_12 + f; }
	else if (e.team == 13) { if (tf_13 == -23000) tf_13 = f; else tf_13 = tf_13 + f; }
	else if (e.team == 14) { if (tf_14 == -23000) tf_14 = f; else tf_14 = tf_14 + f; }
	else { if (tf_0 == -23000) tf_0 = f; else tf_0 = tf_0 + f; }
};
float (entity e)
team_stats_1 =
{
	local float t, f, lead, n_teams;
	sprint (e, "Team frag totals:\n");
	n_teams = 0;
	if (tf_0 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_0, 4);
		sprint (e, " ");
		sprint_team (e, 0);
		sprint (e, "\n");
	}
	if (tf_1 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_1, 4);
		sprint (e, " ");
		sprint_team (e, 1);
		sprint (e, "\n");
	}
	if (tf_2 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_2, 4);
		sprint (e, " ");
		sprint_team (e, 2);
		sprint (e, "\n");
	}
	if (tf_3 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_3, 4);
		sprint (e, " ");
		sprint_team (e, 3);
		sprint (e, "\n");
	}
	if (tf_4 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_4, 4);
		sprint (e, " ");
		sprint_team (e, 4);
		sprint (e, "\n");
	}
	if (tf_5 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_5, 4);
		sprint (e, " ");
		sprint_team (e, 5);
		sprint (e, "\n");
	}
	if (tf_6 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_6, 4);
		sprint (e, " ");
		sprint_team (e, 6);
		sprint (e, "\n");
	}
	if (tf_7 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_7, 4);
		sprint (e, " ");
		sprint_team (e, 7);
		sprint (e, "\n");
	}
	if (tf_8 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_8, 4);
		sprint (e, " ");
		sprint_team (e, 8);
		sprint (e, "\n");
	}
	if (tf_9 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_9, 4);
		sprint (e, " ");
		sprint_team (e, 9);
		sprint (e, "\n");
	}
	if (tf_10 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_10, 4);
		sprint (e, " ");
		sprint_team (e, 10);
		sprint (e, "\n");
	}
	if (tf_11 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_11, 4);
		sprint (e, " ");
		sprint_team (e, 11);
		sprint (e, "\n");
	}
	if (tf_12 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_12, 4);
		sprint (e, " ");
		sprint_team (e, 12);
		sprint (e, "\n");
	}
	if (tf_13 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_13, 4);
		sprint (e, " ");
		sprint_team (e, 13);
		sprint (e, "\n");
	}
	if (tf_14 != -23000)
	{
		n_teams = n_teams + 1;
		sprint_int_f (e, tf_14, 4);
		sprint (e, " ");
		sprint_team (e, 14);
		sprint (e, "\n");
	}
	t = -1;
	f = -23000;
	lead = -23000;
	if (tf_0 != -23000)
	{
		if (tf_0 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_0 - f;
			f = tf_0;
			t = 0;
		}
		else if (tf_0 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_0 < lead)
			lead = f - tf_0;
	}
	if (tf_1 != -23000)
	{
		if (tf_1 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_1 - f;
			f = tf_1;
			t = 1;
		}
		else if (tf_1 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_1 < lead)
			lead = f - tf_1;
	}
	if (tf_2 != -23000)
	{
		if (tf_2 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_2 - f;
			f = tf_2;
			t = 2;
		}
		else if (tf_2 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_2 < lead)
			lead = f - tf_2;
	}
	if (tf_3 != -23000)
	{
		if (tf_3 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_3 - f;
			f = tf_3;
			t = 3;
		}
		else if (tf_3 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_3 < lead)
			lead = f - tf_3;
	}
	if (tf_4 != -23000)
	{
		if (tf_4 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_4 - f;
			f = tf_4;
			t = 4;
		}
		else if (tf_4 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_4 < lead)
			lead = f - tf_4;
	}
	if (tf_5 != -23000)
	{
		if (tf_5 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_5 - f;
			f = tf_5;
			t = 5;
		}
		else if (tf_5 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_5 < lead)
			lead = f - tf_5;
	}
	if (tf_6 != -23000)
	{
		if (tf_6 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_6 - f;
			f = tf_6;
			t = 6;
		}
		else if (tf_6 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_6 < lead)
			lead = f - tf_6;
	}
	if (tf_7 != -23000)
	{
		if (tf_7 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_7 - f;
			f = tf_7;
			t = 7;
		}
		else if (tf_7 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_7 < lead)
			lead = f - tf_7;
	}
	if (tf_8 != -23000)
	{
		if (tf_8 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_8 - f;
			f = tf_8;
			t = 8;
		}
		else if (tf_8 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_8 < lead)
			lead = f - tf_8;
	}
	if (tf_9 != -23000)
	{
		if (tf_9 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_9 - f;
			f = tf_9;
			t = 9;
		}
		else if (tf_9 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_9 < lead)
			lead = f - tf_9;
	}
	if (tf_10 != -23000)
	{
		if (tf_10 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_10 - f;
			f = tf_10;
			t = 10;
		}
		else if (tf_10 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_10 < lead)
			lead = f - tf_10;
	}
	if (tf_11 != -23000)
	{
		if (tf_11 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_11 - f;
			f = tf_11;
			t = 11;
		}
		else if (tf_11 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_11 < lead)
			lead = f - tf_11;
	}
	if (tf_12 != -23000)
	{
		if (tf_12 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_12 - f;
			f = tf_12;
			t = 12;
		}
		else if (tf_12 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_12 < lead)
			lead = f - tf_12;
	}
	if (tf_13 != -23000)
	{
		if (tf_13 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_13 - f;
			f = tf_13;
			t = 13;
		}
		else if (tf_13 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_13 < lead)
			lead = f - tf_13;
	}
	if (tf_14 != -23000)
	{
		if (tf_14 > f)
		{
			if (f == -23000)
				lead = -23000;
			else
				lead = tf_14 - f;
			f = tf_14;
			t = 14;
		}
		else if (tf_14 == f)
			t = -2;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == -23000 || f - tf_14 < lead)
			lead = f - tf_14;
	}
	team_stats_1_lead = lead;
	return t;
};
